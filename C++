# 절차지향과 객체지향의 차이
  - 절차지향 : 순차적인 처리를 중요시하고, 컴퓨터 처리 구조와 비슷하여 상대적으로 빠르지만 유지보수가 힘듬. 대표적으로 C언어가 해당됨
  - 객체지향 : 데이터와 동작을 묶어서 생각하며, 코드의 재사용과 유지보수가 쉽다는 장점이 있음. 절차지향에 비해 상대적으로 느리고 크기가 큼. 대표적으로 c++이 해당됨.
  
# struct(구조체)와 class의 차이
struct의 기본 접근제어 지시자는 public이고 class의 기본 접근제어 지시자는 private임.
  - public : 접근을 어디서든 허용
  - private : 접근을 class 내에서만 허용
  
# 오버로딩과 오버라이딩의 차이
  - 오버로딩 : 같은 이름의 함수를 매개변수를 다르게 하여 재정의 하는 방법 -> 매개변수 개수가 다르거나 개수가 같다면 매개변수의 타입이 달라야함.
  - 오버라이딩 : 상속 관계에서 클래스간 같은 이름, 같은 매개변수의 함수를 재정의하는 방법
  
# C++의 빌드 과정
전처리 -> 컴파일러 -> 어셈블러 -> 링커
  - 전처리 : #으로 시작하는 전처리기 구문 처리 및 주석 제거
  - 컴파일 : 어셈블리어(저수준 언어)로 변환
  - 어셈블 : 오브젝트 코드(0,1로 구성됨)로 변환
  - 링킹 : 라이브러리와 연결해 주고 실행 가능한 파일을 생성
  
# 얕은 복사와 깊은 복사의 차이
객체를 생성하고 초기화시킬 때 멤버변수를 어떻게 초기화하느냐에 따라 나뉨
  - 얕은 복사 : 실제 데이터가 아닌 단지 메모리 주소만을 복사
  - 깊은 복사 : 변수가 관리하는 리소스 자체를 복사하여 새롭게 멤버 변수에 입력시키는 것. 이 때 리소스 자체를 복사할 때 새롭게 메모리를 할당함.
